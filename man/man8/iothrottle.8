.TH iothrottle 8  "2019-09-12" "USER COMMANDS"
.SH NAME
iothrottle \- Traces the buffer io throttle events. Uses Linux eBPF/bcc.
.SH SYNOPSIS
.B iothrottle.py [\-h] [\-T]
.SH DESCRIPTION
iothrottle traces the buffer io throttle\'s latency system-wide, and prints variout details.
This can be useful for discovering this situation and give some judge:

- the buffer IO's performance jitter

- the bdi's performance

- whether we should make /proc/sys/vm/dirty_background_ratio lower

This works by tracing the balance_dirty_pages events using kernel tracepoint.

This makes use of a Linux 4.5 feature (bpf_perf_event_output());
for kernels older than 4.5, see the version under tools/old,
which uses an older mechanism.

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bcc.
.SH OPTIONS
.TP
\-h
Print usage message.
.TP
\-T
Include a timestamp column.
.SH EXAMPLES
.TP
Trace all buffer io throttle events:
#
.B drsnoop
.TP
Trace all buffer io throttle events, and include timestamps:
#
.B drsnoop \-T
.SH FIELDS
.TP
TIME(s)
Time of the call, in seconds.
.TP
PID
Process ID
.TP
TID
Thread ID
.TP
COMM
Process name
.TP
FNAME
File name
.TP
COUNT
Buffer IO's user request size
.TP
POS
Buffer IO's pos of file
.TP
BDI
Buffer IO's dbi
.TP
DIRTIED
Current task's nr_dirties
.TP
RATELIMIT(KBps)
Current task's task_ratelimit
.TP
PAUSED(ms)
Max wait paused ms
.TP
LAT(ms)
Vfs_write's latency
.SH OVERHEAD
This traces the kernel balance_dirty_pages tracepoint and prints output for each
event. As the rate of this is generally expected to be low (< 1000/s), the
overhead is also expected to be negligible. For high IOPS storage systems,
test and quantify before use.
.SH SOURCE
This is from bcc.
.IP
https://github.com/iovisor/bcc
.PP
Also look in the bcc distribution for a companion _examples.txt file containing
example usage, output, and commentary for this tool.
.SH OS
Linux
.SH STABILITY
Unstable - in development.
.SH AUTHOR
Ethercflow
